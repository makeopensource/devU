name: devu
services:
  api:
    # Runs the API
    container_name: api
    build:
      context: .
      dockerfile: api.Dockerfile
    environment:
      TANGO_KEY: devutangokey # TODO: load in from env file. for now this is defined in tango section below
      WAIT_HOSTS: db:5432
      LEVIATHAN_URL: http://levi:9221
    ports:
      - '3001:3001'
    profiles:
      - '' # so it starts with normal docker compose
      - 'dev-client' # start when developing client

  client:
    # Builds the front end and exports static files to ./dist
    build:
      context: .
      dockerfile: client.Dockerfile
    volumes:
      - ./dist:/out
    profiles:
      - '' # so it starts with normal docker compose
      - 'dev-api' # start when developing api

  nginx:
    # Hosts the front end static files from ./dist/local thorough a web server
    build:
      context: .
      dockerfile: nginx.Dockerfile
    volumes:
      - ./dist/local:/usr/share/nginx/html
    depends_on:
      client:
        condition: service_completed_successfully
    command: >
      /bin/sh -c "echo 'Frontend is now accessible at http://localhost:9000' && nginx -g 'daemon off;'"
    ports:
      - '9000:80'
    profiles:
      - '' # so it starts with normal docker compose
      - 'dev-api' # start when developing api

  # Database stuff
  db:
    # Runs the PostgreSQL database
    image: postgres
    environment:
      POSTGRES_DB: typescript_api
      POSTGRES_USER: typescript_user
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    expose:
      - '5432'
    restart: unless-stopped

  minio:
    image: minio/minio
    ports:
      - '9002:9000'
      - '9001:9001'
    expose:
      - '9000'
    #    volumes:
    #      - /tmp/data:/data
    environment:
      MINIO_ROOT_USER: typescript_user
      MINIO_ROOT_PASSWORD: changeMe
    command: server /data --console-address ":9001"

  leviathan:
    container_name: leviathan
    image: ghcr.io/makeopensource/leviathan:master
    environment:
      - LEVIATHAN_LOG_LEVEL=debug # verbose logs for dev
    ports:
      - "9221:9221"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./levi/:/app/appdata
    restart: unless-stopped

  # optional frontend service for leviathan to interact directly with it
  #  kraken:
  #    container_name: kraken
  #    image: ghcr.io/makeopensource/leviathan/kraken:master
  #    ports:
  #      - "3022:3000"
  #    environment:
  #      - LEVIATHAN_URL=http://levi:9221
  #    restart: unless-stopped

  #  leviathan can run tango jobs, here in case we need it later
  #  tango stuff
  #  tango:
  #    container_name: tango
  #    ports:
  #      - '127.0.0.1:3000:3000'
  #    build:
  #      context: ./tango
  #    environment:
  #      - DOCKER_REDIS_HOSTNAME=redis
  #      - RESTFUL_KEY=devutangokey
  #      #      - DOCKER_DEPLOYMENT
  #      # Path to volumes within the Tango container. Does not need to be modified.
  #      #      - DOCKER_VOLUME_PATH
  #      # Modify the below to be the path to volumes on your host machine
  #      - DOCKER_TANGO_HOST_VOLUME_PATH=/absolute/path/to/tango_files
  #    depends_on:
  #      - redis
  #    volumes:
  #      - ./tango.config.py:/opt/TangoService/Tango/config.py
  #      - /var/run/docker.sock:/var/run/docker.sock
  #      - ./logs/tango/:/var/log/tango/
  #      - ./logs/tangonginx:/var/log/nginx
  #      - ./tango_files:/opt/TangoService/Tango/volumes
  #    restart: unless-stopped
  #
  #  redis:
  #    container_name: redis
  #    image: redis:latest
  #    ports:
  #      - '127.0.0.1:6379:6379'
  #    deploy:
  #      replicas: 1
  #    restart: unless-stopped
